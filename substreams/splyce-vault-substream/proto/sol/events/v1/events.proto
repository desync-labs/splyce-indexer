syntax = "proto3";

package vault.events.v1;

//TODO: Create seperate proto files for vault and strategy events 
//Priority: Nice to have

message VaultInitEvent {
  string vault_index = 1;
  string underlying_mint = 2;
  string underlying_token_acc = 3;
  uint32 underlying_decimals = 4;
  uint64 deposit_limit = 5;
  uint64 min_user_deposit = 6;
}

message StrategyInitEvent {
  string account_key = 1;
  string strategy_type = 2;
  string  vault = 3;
  string underlying_mint = 4;
  string underlying_token_acc = 5;
  uint32 underlying_decimals = 6;
  uint64 deposit_limit = 7;
  int64 deposit_period_ends = 8;
  int64 lock_period_ends = 9;
}

message VaultAddStrategyEvent {
  string vault_index = 1;
  string strategy_key = 2;
  uint64 current_debt = 3;
  uint64 max_debt = 4;
  int64 last_update = 5;
  bool is_active = 6;
}

message VaultDepositEvent {
  string vault_index = 1;
  uint64 total_debt = 2;
  uint64 total_idle = 3;
  uint64 total_share = 4;
  uint64 amount = 5;
  uint64 share = 6;
  string token_account = 7;
  string share_account = 8;
  string authority = 9;
}


message VaultUpdateDepositLimitEvent {
  string vault_index = 1;
  uint64 new_limit = 2;
}


message VaultWithdrawlEvent {
  string vault_index = 1;
  uint64 total_idle = 2;
  uint64 total_share = 3;
  uint64 assets_to_transfer = 4;
  uint64 shares_to_burn = 5;
  string token_account = 6;
  string share_account = 7;
  string authority = 8;
}

message StrategyDepositEvent {
  string account_key = 1;
  uint64 amount = 2;
  uint64 total_assets = 3;
}

message StrategyWithdrawEvent {
  string account_key = 1;
  uint64 amount = 2;
  uint64 total_assets = 3;
}

message UpdatedCurrentDebtForStrategyEvent {
  string vault_index = 1;
  string strategy_key = 2;
  uint64 total_idle = 3;
  uint64 total_debt = 4;
  uint64 new_debt = 5;
}

message StrategyReportedEvent {
  string strategy_key = 1;
  uint64 gain = 2;
  uint64 loss = 3;
  uint64 current_debt = 4;
  uint64 protocol_fees = 5;
  uint64 total_fees = 6;
  int64 timestamp = 7;
}

message VaultEvent {
  oneof event {
    VaultInitEvent vaultInitialize = 1;
    VaultAddStrategyEvent strategyAdd = 2;
    VaultDepositEvent vaultDeposit = 3;
    VaultWithdrawlEvent withdrwal = 4;
    VaultUpdateDepositLimitEvent updateDepositLimit = 5;
    StrategyInitEvent strategyInitialize = 6;
    StrategyDepositEvent strategyDeposit = 7;
    StrategyWithdrawEvent strategyWithdraw = 8;
    UpdatedCurrentDebtForStrategyEvent updatedDebtForStrategy = 9;
    StrategyReportedEvent strategyReported = 10;
  }
  string transaction_hash = 1000;
  uint64 block_height = 1001;
  int64 block_timestamp = 1002;
}

//Raw logs from the vault program
message VaultEventLogs {
  repeated bytes logs = 1;
  string transaction_hash = 2;
  uint64 block_height = 3;
  int64 block_timestamp = 4;
}