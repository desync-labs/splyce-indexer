syntax = "proto3";

package vault.events.v1;

//TODO: Create seperate proto files for vault and strategy events 
//Priority: Nice to have

message VaultInitEvent {
  bytes vault_index = 1;
  bytes underlying_mint = 2;
  bytes underlying_token_acc = 3;
  uint32 underlying_decimals = 4;
  uint64 deposit_limit = 5;
  uint64 min_user_deposit = 6;
}

message StrategyInitEvent {
  bytes account_key = 1;
  string strategy_type = 2;
  bytes  vault = 3;
  bytes underlying_mint = 4;
  bytes underlying_token_acc = 5;
  uint32 underlying_decimals = 6;
  uint64 total_idle = 7;
  uint64 total_funds = 8;
  uint64 deposit_limit = 9;
  uint64 deposit_period_ends = 10;
  uint64 lock_period_ends = 11;
}

message VaultAddStrtegyEvent {
  bytes vault_index = 1;
  bytes strategy_key = 2;
  uint64 current_debt = 3;
  uint64 max_debt = 4;
  uint64 last_update = 5;
  bool is_active = 6;
}

message VaultDepositEvent {
  bytes vault_index = 1;
  uint64 amount = 2;
  uint64 share = 3;
}


message VaultUpdateDepositLimitEvent {
  bytes vault_index = 1;
  uint64 new_limit = 2;
}


message VaultWithdrawlEvent {
  bytes vault_index = 1;
  uint64 total_idle = 2;
  uint64 total_share = 3;
  uint64 assets_to_transfer = 4;
  uint64 shares_to_burn = 5;
}


message StrategyDepositEvent {
  bytes account_key = 1;
  uint64 amount = 2;
  uint64 total_funds = 3;
}

message StrategyWithdrawEvent {
  bytes account_key = 1;
  uint64 amount = 2;
  uint64 total_funds = 3;
}

message VaultEvent {
  oneof event {
    VaultInitEvent vaultInitialize = 1;
    VaultAddStrtegyEvent strategyAdd = 2;
    VaultDepositEvent vaultDeposit = 3;
    VaultWithdrawlEvent withdrwal = 4;
    VaultUpdateDepositLimitEvent updateDepositLimit = 5;
    StrategyInitEvent strategyInitialize = 6;
    StrategyDepositEvent strategyDeposit = 7;
    StrategyWithdrawEvent strategyWithdraw = 8;
  }
}

//Raw logs from the vault program
message VaultEventLogs {
  repeated bytes logs = 1;
}