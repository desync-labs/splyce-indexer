type Token @entity {
  "Token mint account"
  id: ID!
  "Number of decimals for this Token"
  decimals: Int!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
}

type Vault @entity {
  "Vault address"
  id: ID!
  "Token this Vault will accrue"
  token: Token! 
  "Token representing Shares in the Vault"
  shareToken: Token!
  "The maximum amount of tokens that can be deposited in this Vault"
  depositLimit: BigInt!
  "Is vault in shutdown"
  shutdown: Boolean!
  "Total amount of assets that has been deposited in strategies."
  totalDebt: BigInt!
  "Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation."
  totalIdle: BigInt!
  "Total Share."
  totalShare: BigInt!
  "Annual Percentage Rate."
  apr: BigDecimal!
  "Strategies for this Vault"
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  "Token deposits into the Vault"
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  "Token withdrawals from the Vault"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  "Current supply of Shares"
  sharesSupply: BigInt!
  "Balance of Tokens in the Vault and its Strategies"
  balanceTokens: BigInt!
  "Current idle Token balance"
  balanceTokensIdle: BigInt! # Tokens in the Vault contract
  "Creation timestamp"
  activation: BigInt!
  "Historical Annual Percentage Rate."
  historicalApr: [VaultHistoricalApr!] @derivedFrom(field: "vault")
  # "Strategy Ids for this vault"
  # strategyIds: [Strategy!]!
}

# enum StrategyType {
#   Simple
#   TradeFinTech
# }

type Strategy @entity {
  "Strategy address"
  id: ID!
  "The Vault"
  vault: Vault
  "Strategy type"
  strategyType: String!
  "Token this Strategy will accrue"
  amount: BigInt!
  "Total amount of assets that has been deposited in strategies."
  totalAssets: BigInt!
  "The maximum amount of tokens that can be deposited in this Vault"
  depositLimit: BigInt!
  "Deposit period ends"
  depositPeriodEnds: BigInt!
  "Lock period ends"
  lockPeriodEnds: BigInt!
  "The current debt the strategy has."
  currentDebt: BigInt!
  "The maximum debt the strategy is allowed to have."
  maxDebt: BigInt!
  "Annual Percentage Rate of the Strategy."
  apr: BigDecimal!
  "Creation timestamp"
  activation: BigInt!
    "The amount of assets this strategy manages that should not be included in Yearn's Total Value Locked (TVL) calculation across it's ecosystem."
  delegatedAssets: BigInt
  "The latest report for this Strategy"
  latestReport: StrategyReport
  "The reports created by this strategy."
  reports: [StrategyReport!]! @derivedFrom(field: "strategy")
  # "Vaults that this strategy is active"
  # activeOnVaults: [Vault!] @derivedFrom(field: "strategies")
  reportsCount: BigDecimal!
    "Historical Annual Percentage Rate of teh Strategy."
  historicalApr: [StrategyHistoricalApr!] @derivedFrom(field: "strategy")
  "The reported protocol fees amount for the strategy."
  performanceFees: BigInt!
}

type StrategyReport @entity {
  "The Strategy Report ID."
  id: ID!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  # "Ethereum Transaction"
  # transaction: Transaction!
  "Transaction Hash"
  transactionHash: String!
  "The Strategy reference."
  strategy: Strategy!
  "The reported gain amount for the strategy."
  gain: BigInt!
  "The reported loss amount for the strategy."
  loss: BigInt!
  "The reported current debt amount for the strategy."
  currentDebt: BigInt!
  "The reported protocol fees amount for the strategy."
  protocolFees: BigInt!
  "The reported total fees amount for the strategy."
  totalFees: BigInt!
  # "The reported total refunds amount for the strategy."
  # totalRefunds: BigInt!
  # "Vault state"
  # vaultUpdate: VaultUpdate!
  "The results created by this report. They are generated comparing the previous report and the current one."
  results: [StrategyReportResult!]! @derivedFrom(field: "currentReport")
}

type StrategyReportResult @entity {
  "The Strategy Report Result ID."
  id: ID!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  "The current strategy report."
  currentReport: StrategyReport!
  "The previous strategy report."
  previousReport: StrategyReport!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  "The duration (in days) from the previous report."
  duration: BigDecimal!
  "Duration percentage rate."
  durationPr: BigDecimal!
  "Annual Percentage Rate."
  apr: BigDecimal!
  # "Ethereum Transaction"
  # transaction: Transaction!
  "Transaction Hash"
  transactionHash: String!
}

type Deposit @entity {
  "Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Account making Deposit"
  account: Account!
  "Vault deposited into"
  vault: Vault!
  "Number of Tokens deposited into Vault"
  tokenAmount: BigInt!
  "Number of new Vault Shares minted"
  sharesMinted: BigInt!
  # "Ethereum Transaction"
  # transaction: Transaction!
  # "Vault Update"
  # vaultUpdate: VaultUpdate!
}

type Withdrawal @entity {
  "Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Account making withdraw"
  account: Account!
  "Vault withdrawn from"
  vault: Vault!
  "Number of Tokens withdrawn from Vault"
  tokenAmount: BigInt!
  "Number of Vault Shares burnt"
  sharesBurnt: BigInt!
  # "Ethereum Transaction"
  # transaction: Transaction!
  # "Vault Update"
  # vaultUpdate: VaultUpdate!
}


type Account @entity {
  "Account address"
  id: ID!
  "Vault deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Vault withdrawals"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  "Token Account"
  tokenAccount: [TokenWallet!]! @derivedFrom(field: "authority")
  "Share Account"
  shareAccount: [TokenWallet!]! @derivedFrom(field: "authority")
  "Vault positions"
  vaultPositions: [AccountVaultPosition!]! @derivedFrom(field: "account")
  # "Incoming share transfers"
  # sharesReceived: [Transfer!]! @derivedFrom(field: "to")
  # "Outgoing share transfers"
  # sharesSent: [Transfer!]! @derivedFrom(field: "from")
}

# type ShareAccount @entity {
#   "Account address"
#   id: ID!
#   "Authority"
#   authority: Account!
#   # "Mint"
#   # mint: Token!
# }

#This is like a wallet ... which holds the tokens
type TokenWallet @entity {
  "Account address"
  id: ID!
 "Authority"
  authority: Account!
  # "Mint"
  # mint: Token!
}

type AccountVaultPosition @entity {
  "Account-Vault"
  id: ID!
  "Vault"
  vault: Vault!
  "Account"
  account: Account!
  "Vault token"
  token: Token!
  # "Vault share token"
  shareToken: Token!
  # "Created in transaction"
  # transaction: Transaction!
  # "Latest account update for this Vault"
  # latestUpdate: AccountVaultPositionUpdate!
  # "Account updates over time"
  # updates: [AccountVaultPositionUpdate!]! @derivedFrom(field: "accountVaultPosition")
  "Share balance"
  balanceShares: BigInt!
  "The current balance of tokens defined as: sum(deposits) - sum(withdrawals) + sum(received transfers) - sum(sent transfers)."
  balanceTokens: BigInt!
  "The current balance position defined as: (vault.balanceOf(account) * (vault.pricePerShare() / 10**vault.decimals()))."
  balancePosition: BigInt!
  "The accumulated profit balance for the account/vault. It is only calculated when the user withdraws all the shares."
  balanceProfit: BigInt!
}

type VaultHistoricalApr @entity {
  id: ID!
  "time in UTC"
  timestamp: BigInt!
  "The Annual Percentage Rate"
  apr: BigDecimal!
  "The Vault"
  vault: Vault!
}

type StrategyHistoricalApr @entity {
  id: ID!
  "time in UTC"
  timestamp: BigInt!
  "The Annual Percentage Rate"
  apr: BigDecimal!
  "The Strategy"
  strategy: Strategy!
}