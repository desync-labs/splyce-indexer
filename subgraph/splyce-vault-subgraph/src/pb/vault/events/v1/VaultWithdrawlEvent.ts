// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class VaultWithdrawlEvent {
  static encode(message: VaultWithdrawlEvent, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.vaultIndex);

    writer.uint32(16);
    writer.uint64(message.totalIdle);

    writer.uint32(24);
    writer.uint64(message.totalShare);

    writer.uint32(32);
    writer.uint64(message.assetsToTransfer);

    writer.uint32(40);
    writer.uint64(message.sharesToBurn);
  }

  static decode(reader: Reader, length: i32): VaultWithdrawlEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new VaultWithdrawlEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vaultIndex = reader.bytes();
          break;

        case 2:
          message.totalIdle = reader.uint64();
          break;

        case 3:
          message.totalShare = reader.uint64();
          break;

        case 4:
          message.assetsToTransfer = reader.uint64();
          break;

        case 5:
          message.sharesToBurn = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vaultIndex: Uint8Array;
  totalIdle: u64;
  totalShare: u64;
  assetsToTransfer: u64;
  sharesToBurn: u64;

  constructor(
    vaultIndex: Uint8Array = new Uint8Array(0),
    totalIdle: u64 = 0,
    totalShare: u64 = 0,
    assetsToTransfer: u64 = 0,
    sharesToBurn: u64 = 0
  ) {
    this.vaultIndex = vaultIndex;
    this.totalIdle = totalIdle;
    this.totalShare = totalShare;
    this.assetsToTransfer = assetsToTransfer;
    this.sharesToBurn = sharesToBurn;
  }
}
