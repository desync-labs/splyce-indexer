// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class VaultInitEvent {
  static encode(message: VaultInitEvent, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.vaultIndex);

    writer.uint32(18);
    writer.bytes(message.underlyingMint);

    writer.uint32(26);
    writer.bytes(message.underlyingTokenAcc);

    writer.uint32(32);
    writer.uint32(message.underlyingDecimals);

    writer.uint32(40);
    writer.uint64(message.depositLimit);

    writer.uint32(48);
    writer.uint64(message.minUserDeposit);
  }

  static decode(reader: Reader, length: i32): VaultInitEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new VaultInitEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vaultIndex = reader.bytes();
          break;

        case 2:
          message.underlyingMint = reader.bytes();
          break;

        case 3:
          message.underlyingTokenAcc = reader.bytes();
          break;

        case 4:
          message.underlyingDecimals = reader.uint32();
          break;

        case 5:
          message.depositLimit = reader.uint64();
          break;

        case 6:
          message.minUserDeposit = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vaultIndex: Uint8Array;
  underlyingMint: Uint8Array;
  underlyingTokenAcc: Uint8Array;
  underlyingDecimals: u32;
  depositLimit: u64;
  minUserDeposit: u64;

  constructor(
    vaultIndex: Uint8Array = new Uint8Array(0),
    underlyingMint: Uint8Array = new Uint8Array(0),
    underlyingTokenAcc: Uint8Array = new Uint8Array(0),
    underlyingDecimals: u32 = 0,
    depositLimit: u64 = 0,
    minUserDeposit: u64 = 0
  ) {
    this.vaultIndex = vaultIndex;
    this.underlyingMint = underlyingMint;
    this.underlyingTokenAcc = underlyingTokenAcc;
    this.underlyingDecimals = underlyingDecimals;
    this.depositLimit = depositLimit;
    this.minUserDeposit = minUserDeposit;
  }
}
