// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class UpdatedCurrentDebtForStrategyEvent {
  static encode(
    message: UpdatedCurrentDebtForStrategyEvent,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.vaultIndex);

    writer.uint32(18);
    writer.string(message.strategyKey);

    writer.uint32(24);
    writer.uint64(message.totalIdle);

    writer.uint32(32);
    writer.uint64(message.totalDebt);

    writer.uint32(40);
    writer.uint64(message.newDebt);
  }

  static decode(
    reader: Reader,
    length: i32
  ): UpdatedCurrentDebtForStrategyEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new UpdatedCurrentDebtForStrategyEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vaultIndex = reader.string();
          break;

        case 2:
          message.strategyKey = reader.string();
          break;

        case 3:
          message.totalIdle = reader.uint64();
          break;

        case 4:
          message.totalDebt = reader.uint64();
          break;

        case 5:
          message.newDebt = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vaultIndex: string;
  strategyKey: string;
  totalIdle: u64;
  totalDebt: u64;
  newDebt: u64;

  constructor(
    vaultIndex: string = "",
    strategyKey: string = "",
    totalIdle: u64 = 0,
    totalDebt: u64 = 0,
    newDebt: u64 = 0
  ) {
    this.vaultIndex = vaultIndex;
    this.strategyKey = strategyKey;
    this.totalIdle = totalIdle;
    this.totalDebt = totalDebt;
    this.newDebt = newDebt;
  }
}
