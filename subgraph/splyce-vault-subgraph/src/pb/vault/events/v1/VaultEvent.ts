// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { VaultInitEvent } from "./VaultInitEvent";
import { VaultAddStrtegyEvent } from "./VaultAddStrtegyEvent";
import { VaultDepositEvent } from "./VaultDepositEvent";
import { VaultWithdrawlEvent } from "./VaultWithdrawlEvent";
import { VaultUpdateDepositLimitEvent } from "./VaultUpdateDepositLimitEvent";
import { StrategyInitEvent } from "./StrategyInitEvent";
import { StrategyDepositEvent } from "./StrategyDepositEvent";
import { StrategyWithdrawEvent } from "./StrategyWithdrawEvent";

export class VaultEvent {
  static encode(message: VaultEvent, writer: Writer): void {
    const vaultInitialize = message.vaultInitialize;
    if (vaultInitialize !== null) {
      writer.uint32(10);
      writer.fork();
      VaultInitEvent.encode(vaultInitialize, writer);
      writer.ldelim();
    }

    const strategyAdd = message.strategyAdd;
    if (strategyAdd !== null) {
      writer.uint32(18);
      writer.fork();
      VaultAddStrtegyEvent.encode(strategyAdd, writer);
      writer.ldelim();
    }

    const vaultDeposit = message.vaultDeposit;
    if (vaultDeposit !== null) {
      writer.uint32(26);
      writer.fork();
      VaultDepositEvent.encode(vaultDeposit, writer);
      writer.ldelim();
    }

    const withdrwal = message.withdrwal;
    if (withdrwal !== null) {
      writer.uint32(34);
      writer.fork();
      VaultWithdrawlEvent.encode(withdrwal, writer);
      writer.ldelim();
    }

    const updateDepositLimit = message.updateDepositLimit;
    if (updateDepositLimit !== null) {
      writer.uint32(42);
      writer.fork();
      VaultUpdateDepositLimitEvent.encode(updateDepositLimit, writer);
      writer.ldelim();
    }

    const strategyInitialize = message.strategyInitialize;
    if (strategyInitialize !== null) {
      writer.uint32(50);
      writer.fork();
      StrategyInitEvent.encode(strategyInitialize, writer);
      writer.ldelim();
    }

    const strategyDeposit = message.strategyDeposit;
    if (strategyDeposit !== null) {
      writer.uint32(58);
      writer.fork();
      StrategyDepositEvent.encode(strategyDeposit, writer);
      writer.ldelim();
    }

    const strategyWithdraw = message.strategyWithdraw;
    if (strategyWithdraw !== null) {
      writer.uint32(66);
      writer.fork();
      StrategyWithdrawEvent.encode(strategyWithdraw, writer);
      writer.ldelim();
    }

    writer.uint32(8002);
    writer.string(message.transactionHash);

    writer.uint32(8008);
    writer.uint64(message.blockHeight);

    writer.uint32(8016);
    writer.int64(message.blockTimestamp);
  }

  static decode(reader: Reader, length: i32): VaultEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new VaultEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vaultInitialize = VaultInitEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.strategyAdd = VaultAddStrtegyEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.vaultDeposit = VaultDepositEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.withdrwal = VaultWithdrawlEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.updateDepositLimit = VaultUpdateDepositLimitEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.strategyInitialize = StrategyInitEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 7:
          message.strategyDeposit = StrategyDepositEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.strategyWithdraw = StrategyWithdrawEvent.decode(
            reader,
            reader.uint32()
          );
          break;

        case 1000:
          message.transactionHash = reader.string();
          break;

        case 1001:
          message.blockHeight = reader.uint64();
          break;

        case 1002:
          message.blockTimestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vaultInitialize: VaultInitEvent | null;
  strategyAdd: VaultAddStrtegyEvent | null;
  vaultDeposit: VaultDepositEvent | null;
  withdrwal: VaultWithdrawlEvent | null;
  updateDepositLimit: VaultUpdateDepositLimitEvent | null;
  strategyInitialize: StrategyInitEvent | null;
  strategyDeposit: StrategyDepositEvent | null;
  strategyWithdraw: StrategyWithdrawEvent | null;
  transactionHash: string;
  blockHeight: u64;
  blockTimestamp: i64;

  constructor(
    vaultInitialize: VaultInitEvent | null = null,
    strategyAdd: VaultAddStrtegyEvent | null = null,
    vaultDeposit: VaultDepositEvent | null = null,
    withdrwal: VaultWithdrawlEvent | null = null,
    updateDepositLimit: VaultUpdateDepositLimitEvent | null = null,
    strategyInitialize: StrategyInitEvent | null = null,
    strategyDeposit: StrategyDepositEvent | null = null,
    strategyWithdraw: StrategyWithdrawEvent | null = null,
    transactionHash: string = "",
    blockHeight: u64 = 0,
    blockTimestamp: i64 = 0
  ) {
    this.vaultInitialize = vaultInitialize;
    this.strategyAdd = strategyAdd;
    this.vaultDeposit = vaultDeposit;
    this.withdrwal = withdrwal;
    this.updateDepositLimit = updateDepositLimit;
    this.strategyInitialize = strategyInitialize;
    this.strategyDeposit = strategyDeposit;
    this.strategyWithdraw = strategyWithdraw;
    this.transactionHash = transactionHash;
    this.blockHeight = blockHeight;
    this.blockTimestamp = blockTimestamp;
  }
}
