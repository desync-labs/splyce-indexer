// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class VaultAddStrtegyEvent {
  static encode(message: VaultAddStrtegyEvent, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.vaultIndex);

    writer.uint32(18);
    writer.bytes(message.strategyKey);

    writer.uint32(24);
    writer.uint64(message.currentDebt);

    writer.uint32(32);
    writer.uint64(message.maxDebt);

    writer.uint32(40);
    writer.uint64(message.lastUpdate);

    writer.uint32(48);
    writer.bool(message.isActive);
  }

  static decode(reader: Reader, length: i32): VaultAddStrtegyEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new VaultAddStrtegyEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vaultIndex = reader.bytes();
          break;

        case 2:
          message.strategyKey = reader.bytes();
          break;

        case 3:
          message.currentDebt = reader.uint64();
          break;

        case 4:
          message.maxDebt = reader.uint64();
          break;

        case 5:
          message.lastUpdate = reader.uint64();
          break;

        case 6:
          message.isActive = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vaultIndex: Uint8Array;
  strategyKey: Uint8Array;
  currentDebt: u64;
  maxDebt: u64;
  lastUpdate: u64;
  isActive: bool;

  constructor(
    vaultIndex: Uint8Array = new Uint8Array(0),
    strategyKey: Uint8Array = new Uint8Array(0),
    currentDebt: u64 = 0,
    maxDebt: u64 = 0,
    lastUpdate: u64 = 0,
    isActive: bool = false
  ) {
    this.vaultIndex = vaultIndex;
    this.strategyKey = strategyKey;
    this.currentDebt = currentDebt;
    this.maxDebt = maxDebt;
    this.lastUpdate = lastUpdate;
    this.isActive = isActive;
  }
}
