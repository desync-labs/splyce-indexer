// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class StrategyInitEvent {
  static encode(message: StrategyInitEvent, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.accountKey);

    writer.uint32(18);
    writer.string(message.strategyType);

    writer.uint32(26);
    writer.string(message.vault);

    writer.uint32(34);
    writer.string(message.underlyingMint);

    writer.uint32(42);
    writer.string(message.underlyingTokenAcc);

    writer.uint32(48);
    writer.uint32(message.underlyingDecimals);

    writer.uint32(56);
    writer.uint64(message.depositLimit);

    writer.uint32(64);
    writer.int64(message.depositPeriodEnds);

    writer.uint32(72);
    writer.int64(message.lockPeriodEnds);
  }

  static decode(reader: Reader, length: i32): StrategyInitEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StrategyInitEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accountKey = reader.string();
          break;

        case 2:
          message.strategyType = reader.string();
          break;

        case 3:
          message.vault = reader.string();
          break;

        case 4:
          message.underlyingMint = reader.string();
          break;

        case 5:
          message.underlyingTokenAcc = reader.string();
          break;

        case 6:
          message.underlyingDecimals = reader.uint32();
          break;

        case 7:
          message.depositLimit = reader.uint64();
          break;

        case 8:
          message.depositPeriodEnds = reader.int64();
          break;

        case 9:
          message.lockPeriodEnds = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  accountKey: string;
  strategyType: string;
  vault: string;
  underlyingMint: string;
  underlyingTokenAcc: string;
  underlyingDecimals: u32;
  depositLimit: u64;
  depositPeriodEnds: i64;
  lockPeriodEnds: i64;

  constructor(
    accountKey: string = "",
    strategyType: string = "",
    vault: string = "",
    underlyingMint: string = "",
    underlyingTokenAcc: string = "",
    underlyingDecimals: u32 = 0,
    depositLimit: u64 = 0,
    depositPeriodEnds: i64 = 0,
    lockPeriodEnds: i64 = 0
  ) {
    this.accountKey = accountKey;
    this.strategyType = strategyType;
    this.vault = vault;
    this.underlyingMint = underlyingMint;
    this.underlyingTokenAcc = underlyingTokenAcc;
    this.underlyingDecimals = underlyingDecimals;
    this.depositLimit = depositLimit;
    this.depositPeriodEnds = depositPeriodEnds;
    this.lockPeriodEnds = lockPeriodEnds;
  }
}
