// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class StrategyReportedEvent {
  static encode(message: StrategyReportedEvent, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.strategyKey);

    writer.uint32(16);
    writer.uint64(message.gain);

    writer.uint32(24);
    writer.uint64(message.loss);

    writer.uint32(32);
    writer.uint64(message.currentDebt);

    writer.uint32(40);
    writer.uint64(message.protocolFees);

    writer.uint32(48);
    writer.uint64(message.totalFees);

    writer.uint32(56);
    writer.int64(message.timestamp);
  }

  static decode(reader: Reader, length: i32): StrategyReportedEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StrategyReportedEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.strategyKey = reader.string();
          break;

        case 2:
          message.gain = reader.uint64();
          break;

        case 3:
          message.loss = reader.uint64();
          break;

        case 4:
          message.currentDebt = reader.uint64();
          break;

        case 5:
          message.protocolFees = reader.uint64();
          break;

        case 6:
          message.totalFees = reader.uint64();
          break;

        case 7:
          message.timestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  strategyKey: string;
  gain: u64;
  loss: u64;
  currentDebt: u64;
  protocolFees: u64;
  totalFees: u64;
  timestamp: i64;

  constructor(
    strategyKey: string = "",
    gain: u64 = 0,
    loss: u64 = 0,
    currentDebt: u64 = 0,
    protocolFees: u64 = 0,
    totalFees: u64 = 0,
    timestamp: i64 = 0
  ) {
    this.strategyKey = strategyKey;
    this.gain = gain;
    this.loss = loss;
    this.currentDebt = currentDebt;
    this.protocolFees = protocolFees;
    this.totalFees = totalFees;
    this.timestamp = timestamp;
  }
}
